
// -*-c++-*-
//-------------------------------------------------------------------------
//   Copyright 2002-2023 National Technology & Engineering Solutions of
//   Sandia, LLC (NTESS).  Under the terms of Contract DE-NA0003525 with
//   NTESS, the U.S. Government retains certain rights in this software.
//
//   This file is part of the Xyce(TM) Parallel Electrical Simulator.
//
//   Xyce(TM) is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   Xyce(TM) is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with Xyce(TM).
//   If not, see <http://www.gnu.org/licenses/>.
//-------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//
// Purpose        :
//
// Special Notes  : Generated from verilog file serpentine_50px_0.va with ADMS
//                  interface for Xyce 7.7.0
//                  DO NOT EDIT THIS FILE DIRECTLY!  It may be overwritten!
//
// Creator        : admsXml-2.3.7
//
// Creation Date  : Fri, 08 Nov 2024 11:10:29
//
//-----------------------------------------------------------------------------
#ifndef Xyce_N_DEV_ADMSserpentine_50px_0_h
#define Xyce_N_DEV_ADMSserpentine_50px_0_h


#include <N_DEV_Configuration.h>
#include <N_DEV_Const.h>
#include <N_DEV_DeviceBlock.h>
#include <N_DEV_DeviceInstance.h>
#include <N_DEV_DeviceModel.h>


// Xyce_config.h contains a VERSION macro from autoconf, and some
// Verilog-A models like to define a variable of that name.  This can be
// a serious problem, and we don't need the VERSION macro.  Get rid of it.
// This must happen *after* all the includes of Xyce headers, each of which
// includes Xyce_config.h.  The implementation file must do this all again
// because it includes more Xyce headers *after* including this one.
#ifdef VERSION
#undef VERSION
#endif

namespace Xyce {
namespace Device {
namespace ADMSserpentine_50px_0 {

class Model;
class Instance;
class InstanceSensitivity;

#ifdef Xyce_ADMS_SENSITIVITIES
//-----------------------------------------------------------------------------
// Class         : InstanceSensitivity
//
// Purpose       : This class is a functor for sensitivity
//
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class InstanceSensitivity : public baseSensitivity
{
public:
InstanceSensitivity() :
baseSensitivity() {};

virtual ~InstanceSensitivity() {};

virtual void operator()(
const ParameterBase &entity,
const std::string &param,
std::vector<double> & dfdp,
std::vector<double> & dqdp,
std::vector<double> & dbdp,
std::vector<int> & Findices,
std::vector<int> & Qindices,
std::vector<int> & Bindices
) const ;
};

static InstanceSensitivity instSens;


//-----------------------------------------------------------------------------
// Class         : ModelSensitivity
//
// Purpose       : This class is a functor for sensitivity
//
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class ModelSensitivity : public baseSensitivity
{
public:
ModelSensitivity() :
baseSensitivity() {};

virtual ~ModelSensitivity() {};

virtual void operator()(
const ParameterBase &entity,
const std::string &param,
std::vector<double> & dfdp,
std::vector<double> & dqdp,
std::vector<double> & dbdp,
std::vector<int> & Findices,
std::vector<int> & Qindices,
std::vector<int> & Bindices
) const ;
};

static ModelSensitivity modSens;
#endif // Xyce_ADMS_SENSITIVITIES

// general purpose free functions
// thermal voltage at kelvin temperature temp)
static inline double adms_vt(const double temp) {return(CONSTKoverQ*temp);};


#ifdef Xyce_ADMS_SENSITIVITIES
//-----------------------------------------------------------------------------
// "structs" to hold instance and model param/variable copies
//-----------------------------------------------------------------------------
class instanceSensStruct
{
public:
// instance parameters
// reals
double instancePar_length;
double d_instancePar_length_dX;
bool instancePar_given_length;
double instancePar_CROSS_SECTION;
double d_instancePar_CROSS_SECTION_dX;
bool instancePar_given_CROSS_SECTION;
double instancePar_NU;
double d_instancePar_NU_dX;
bool instancePar_given_NU;
double instancePar_ccap;
double d_instancePar_ccap_dX;
bool instancePar_given_ccap;
// instance variables
// reals
double instanceVar_R;
double d_instanceVar_R_dX;
};

class modelSensStruct
{
public:
};



//-----------------------------------------------------------------------------
// Free functions used by sensitivity
//
//-----------------------------------------------------------------------------
void evaluateModelEquations(
std::vector <double> & probeVars,
// probe constants
const int admsProbeID_C_c_out_cv2,
const int admsProbeID_C_c_in_cv1,
const int admsProbeID_P_fl_in_fl_out,
// node constants
const int admsNodeID_fl_in,
const int admsNodeID_fl_out,
const int admsNodeID_c_in,
const int admsNodeID_c_out,
const int admsNodeID_cv1,
const int admsNodeID_cv2,
instanceSensStruct & instanceStruct,
modelSensStruct & modelStruct,
// basic variables
 double admsTemperature, double adms_vt_nom, double ADMSgmin_arg, std::vector <double> & d_staticContributions_dX, std::vector <double> & d_dynamicContributions_dX, const Instance & theInstance);

void evaluateInitialInstance(
instanceSensStruct & instanceStruct,
modelSensStruct & modelStruct,
 double admsTemperature,double adms_vt_nom, double ADMSgmin_arg, const Instance & theInstance);

void evaluateInitialModel(
modelSensStruct & modelStruct,
 double admsTemperature, double ADMSgmin_arg, const Instance & theInstance);

#endif // Xyce_ADMS_SENSITIVITIES


// Limited exponential --- NOT what verilog LRM says, but what qucs,
// ng-spice, and zspice do.

template <typename T>
T limexp(const T &x)
{
  if ((x) < 80.0)
  return (exp(x));
  else
  return (exp(80.0)*(x-79.0));
}


struct Traits: public DeviceTraits<Model, Instance>
{
  static const char *name() {return "ADMS serpentine_50px_0";}
  static const char *deviceTypeName() {return "SERPENTINE_50PX_0 level 1";}

  static int numNodes() {return 4;}


  static bool modelRequired() {return false;}
  static bool isLinearDevice() {return false;}

  static Device *factory(const Configuration &configuration, const FactoryBlock &factory_block);
  static void loadModelParameters(ParametricData<Model> &model_parameters);
  static void loadInstanceParameters(ParametricData<Instance> &instance_parameters);
};

//-----------------------------------------------------------------------------
// Class         : Instance

//
// Purpose       : This class represents a single instance  of the
//                 device.  It mainly contains indices and pointers into
//                 the matrix equation (see the resistor instance class for
//                 more details).
//
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class Instance : public DeviceInstance
{
  friend class ParametricData<Instance>;
  friend class Model;
#ifdef Xyce_ADMS_SENSITIVITIES
  friend class InstanceSensitivity;
  friend class ModelSensitivity;
#endif // Xyce_ADMS_SENSITIVITIES
  friend struct Traits;

  public:
    Instance(
      const Configuration &       configuration,
      const InstanceBlock &       instance_block,
      Model &                     model,
      const FactoryBlock &        factory_block);

    ~Instance();

private:
    Instance(const Instance &);
    Instance &operator=(const Instance &);

public:
    void registerLIDs( const LocalIdVector & intLIDVecRef,
                       const LocalIdVector & extLIDVecRef );
    void registerStoreLIDs( const LocalIdVector & stoLIDVecRef );
    void setupPointers();

    void loadNodeSymbols(Util::SymbolTable &symbol_table) const;

    const JacobianStamp & jacobianStamp() const;
    void registerJacLIDs( const JacobianStamp & jacLIDVec );

    void registerBranchDataLIDs(const std::vector<int> & branchLIDVecRef);

    bool processParams();
    bool updateTemperature ( const double & temp = -999.0 );
    bool updateIntermediateVars ();
    bool updatePrimaryState ();
    bool updateSecondaryState ();

    // load functions, residual:
    bool loadDAEQVector ();
    bool loadDAEFVector ();

    // load functions, Jacobian:
    bool loadDAEdQdx ();
    bool loadDAEdFdx ();

      void collapseNodes();

  private:

  public:
    // iterator reference to the serpentine_50px_0 model which owns this instance.
    // Getters and setters
    Model &getModel()
    {
      return model_;
    }

  private:

    Model & model_;   //< Owning Model
    // Begin verilog Instance Variables
    //   Instance Parameters
    double length;
    double CROSS_SECTION;
    double NU;
    double ccap;
    //  Variables of global_instance scope
    double R;
    // end verilog Instance Variables=====
    // Nodal LID Variables
    int li_fl_in;
    int li_fl_out;
    int li_c_in;
    int li_c_out;
    int li_cv1;
    int li_cv2;
    // end Nodal LID Variables
    // Branch LID Variables
    // end Branch LID Variables
    // Lead (branch) LID Variables
    int li_branch_ifl_in;
    int li_branch_ifl_out;
    int li_branch_ic_in;
    int li_branch_ic_out;
    // end Lead (branch) LID Variables
    // Jacobian  pointers
    double * f_fl_in_Equ_fl_in_Node_Ptr;
    double * f_fl_in_Equ_fl_out_Node_Ptr;
    double * f_fl_out_Equ_fl_in_Node_Ptr;
    double * f_fl_out_Equ_fl_out_Node_Ptr;
    double * f_c_in_Equ_c_in_Node_Ptr;
    double * f_c_in_Equ_cv1_Node_Ptr;
    double * f_cv1_Equ_c_in_Node_Ptr;
    double * f_cv1_Equ_cv1_Node_Ptr;
    double * f_c_out_Equ_c_out_Node_Ptr;
    double * f_c_out_Equ_cv2_Node_Ptr;
    double * f_cv2_Equ_c_out_Node_Ptr;
    double * f_cv2_Equ_cv2_Node_Ptr;
    double * q_fl_in_Equ_fl_in_Node_Ptr;
    double * q_fl_in_Equ_fl_out_Node_Ptr;
    double * q_fl_out_Equ_fl_in_Node_Ptr;
    double * q_fl_out_Equ_fl_out_Node_Ptr;
    double * q_c_in_Equ_c_in_Node_Ptr;
    double * q_c_in_Equ_cv1_Node_Ptr;
    double * q_cv1_Equ_c_in_Node_Ptr;
    double * q_cv1_Equ_cv1_Node_Ptr;
    double * q_c_out_Equ_c_out_Node_Ptr;
    double * q_c_out_Equ_cv2_Node_Ptr;
    double * q_cv2_Equ_c_out_Node_Ptr;
    double * q_cv2_Equ_cv2_Node_Ptr;
    // Jacobian offsets
    int A_fl_in_Equ_fl_in_NodeOffset;
    int A_fl_in_Equ_fl_out_NodeOffset;
    int A_fl_out_Equ_fl_in_NodeOffset;
    int A_fl_out_Equ_fl_out_NodeOffset;
    int A_c_in_Equ_c_in_NodeOffset;
    int A_c_in_Equ_cv1_NodeOffset;
    int A_cv1_Equ_c_in_NodeOffset;
    int A_cv1_Equ_cv1_NodeOffset;
    int A_c_out_Equ_c_out_NodeOffset;
    int A_c_out_Equ_cv2_NodeOffset;
    int A_cv2_Equ_c_out_NodeOffset;
    int A_cv2_Equ_cv2_NodeOffset;
    // end of Jacobian and pointers
   // node numbers
    static const int admsNodeID_fl_in = 0;
    static const int admsNodeID_fl_out = 1;
    static const int admsNodeID_c_in = 2;
    static const int admsNodeID_c_out = 3;
    static const int admsNodeID_cv1 = 0+4;
    static const int admsNodeID_cv2 = 1+4;
    static const int admsNodeID_GND = -1;
   // end node numbers
   // Additional IDs for branch equations
   // end branch numbers
   // Probe numbers
    static const int admsProbeID_C_c_out_cv2 = 0;
    static const int admsProbeID_C_c_in_cv1 = 1;
    static const int admsProbeID_P_fl_in_fl_out = 2;
   // end probe numbers
   // Store LIDs
   // end store LIDs
   // Store LIDs for output vars
   // end store LIDs for output vars
     // bools for collapsing nodes
     bool collapseNode_cv2;
 // Arrays to hold probes
 std::vector < double > probeVars;
 std::vector < std::vector < double > > d_probeVars;
 // Arrays to hold contributions
 // dynamic contributions are differentiated w.r.t time
 std::vector < double > staticContributions;
 std::vector < std::vector < double > > d_staticContributions;
 std::vector < double > dynamicContributions;
 std::vector < std::vector < double > > d_dynamicContributions;


    // this is what we'll use when any model uses $temperature.  We'll
    // set it in updateTemperature, and initialize it to whatever
    // is in devOptions when the instance is constructed.
    double admsTemperature;

    // vt at $temperature;
    double adms_vt_nom;


    // This one is for the annoying bogus "XyceADMSInstTemp" parameter
    // that we need so we can set it from the device manager when there's no
    // "TEMP" parameter to use
    double admsInstTemp;


    JacobianStamp jacStamp;
    IdVector nodeMap;
    PairMap pairToJacStampMap;

    // These instance-owned vectors are for storage of lead current data
    std::vector<double> leadCurrentF;
    std::vector<double> leadCurrentQ;


    };


//-----------------------------------------------------------------------------
// Class         : Model

// Purpose       :
// Special Notes :
// Creator       :
// Creation Date :
//-----------------------------------------------------------------------------
class Model : public DeviceModel
{
    typedef std::vector<Instance *> InstanceVector;

    friend class ParametricData<Model>;
    friend class Instance;
#ifdef Xyce_ADMS_SENSITIVITIES
    friend class InstanceSensitivity;
    friend class ModelSensitivity;
#endif // Xyce_ADMS_SENSITIVITIES
    friend struct Traits;

  public:
    Model(
      const Configuration &       configuration,
      const ModelBlock &          model_block,
      const FactoryBlock &        factory_block);

    ~Model();

private:
    Model(const Model &);
    Model &operator=(const Model &);

public:
    virtual void forEachInstance(DeviceInstanceOp &op) const /* override */;
    virtual std::ostream &printOutInstances(std::ostream &os) const;
    bool processParams();
    bool processInstanceParams();

  private:

  public:
    void addInstance(Instance *instance)
    {
      instanceContainer.push_back(instance);
    }

    void setupBaseInstanceContainer()
    {
      std::vector<Instance*>::iterator iter = instanceContainer.begin();
      std::vector<Instance*>::iterator end   = instanceContainer.end();
      for ( ; iter!=end; ++iter)
      {
      Xyce::Device::DeviceModel::baseInstanceContainer.push_back( static_cast<Xyce::Device::DeviceInstance *>(*iter) );
    }
  }

  private:
    std::vector<Instance*> instanceContainer;

  private:

    // This one is for the annoying bogus "XyceADMSInstTemp" parameter
    // that we need so we can set it from the device manager when there's no
    // "TEMP" model parameter to use
    double admsModTemp;
// Begin verilog Model Variables
//   Model Parameters
    //  Variables of global_model scope
    // end verilog model variables=====
};

void registerDevice(const DeviceCountMap& deviceMap = DeviceCountMap(),
                    const std::set<int>& levelSet = std::set<int>());

} // namespace ADMSserpentine_50px_0
} // namespace Device
} // namespace Xyce
#endif //Xyce_N_DEV_ADMSserpentine_50px_0_h
