# 1 "./serpentine_300px_1.va"

# 1 "nature_fluid_dynamics.vams"

nature Pressure
     units = "Pa";
     access = P;
     
endnature

nature FluidFlow
     units = "L/s";
     access = Qfl;
     
endnature

nature Concentration_ppm
     units = "ppm";
     access = PPM;
     
endnature

nature Concentration_mole
     units = "M";
     access = C;
     
endnature

nature Concentration_current
     units = "M";
     access = Ci;
     
endnature

discipline fluidDynamics
     domain continuous;
     potential Pressure;
     flow FluidFlow;
enddiscipline

discipline concentration
    domain continuous;
    potential Concentration_mole;
    flow Concentration_current;
enddiscipline

# 3 "./serpentine_300px_1.va"
# 1 "disciplines.vams"






















# 25 "disciplines.vams"



nature current
  access = I;
  units = "A";
  abstol = 0.001234;
endnature


nature voltage
  access = V;
  units = "V";
  abstol = 0.0004321;
endnature


nature power
  access = Pwr;
  units = "W";
  abstol = 0.00101010;
endnature


nature flux
  access = Phi;
  units = "We";
endnature


nature temperature
  access = Temp;
  units = "K";
  abstol = 3.14;
endnature


discipline thermal
  potential temperature;
  flow power;
enddiscipline


discipline electrical
  potential voltage;
  flow current;
enddiscipline

discipline magnetic
  potential voltage; 
  flow current; 
enddiscipline

discipline rotational_omega
  potential voltage; 
  flow current; 
enddiscipline



# 4 "./serpentine_300px_1.va"
# 1 "constants.vams"






















# 25 "constants.vams"




























# 5 "./serpentine_300px_1.va"

module serpentine_300px_1(fl_in, fl_out, c_in, c_out);

inout fl_in, fl_out, c_in, c_out;
concentration c_in, c_out;
concentration cv1, cv2;
fluidDynamics fl_in, fl_out;

(*desc="length", type="instance"*) parameter real length=71.146m;
(*desc="length", type="instance"*) parameter real CROSS_SECTION=1;
(*desc="length", type="instance"*) parameter real NU=0.0010005;

(*desc="capacitance concentration", type="instance"*) parameter real ccap=100u ;

real pixel_size;
real layer_height;
real W, H, L;
real R;
real ch_width_pixels, ch_height_layers;
real cqi, cqo;

ground gnd;

analog begin
   
   @(initial_instance) 
   begin : initial_instance

      
      
      
      pixel_size = 7.6u;
      layer_height = 10u;

      
      
      
      begin 
      if (CROSS_SECTION == 1) begin
         ch_width_pixels = 14;
         ch_height_layers= 10;
      end
      else if(CROSS_SECTION == 2) begin
         ch_width_pixels = 6;
         ch_height_layers= 5;
      end
      end

      W = pixel_size * ch_width_pixels;
      H = layer_height*ch_height_layers;
      L = length;

      R = (12*NU*L) / (1 - 0.63*(H/W)) * 1/(H*H*H*W);

   end 

   Qfl(fl_in, fl_out) <+ P(fl_in, fl_out)/R;
   
   
   C(cv1, cv2) <+ 0 ;
   cqi = ccap*C(c_in,  cv1) ;
   cqo = ccap*C(c_out, cv2);
   Ci(c_in,  cv1) <+ ddt(cqi) ;
   Ci(c_out, cv2) <+ ddt(cqo) ;
end

endmodule
